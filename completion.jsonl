{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    if len(numbers) < 2:\n        return False\n    \n    # Sort the numbers to ensure closest pairs are adjacent\n    numbers.sort()\n    \n    for i in range(len(numbers) - 1):\n        # Compare adjacent elements in the sorted list\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Separate groups of balanced parentheses from the input string.\n    Ignore any spaces in the input string and return a list of balanced groups.\n    \"\"\"\n    # Remove spaces from the input string\n    compact_string = paren_string.replace(\" \", \"\")\n    groups = []\n    current_group = \"\"\n    balance_counter = 0\n\n    for char in compact_string:\n        # Only process parentheses characters\n        if char not in '()':\n            continue\n\n        # Add character to the current group\n        current_group += char\n\n        # Update the balance counter\n        if char == '(':  \n            balance_counter += 1\n        elif char == ')':\n            balance_counter -= 1\n\n        # When balance is zero, a complete group is formed\n        if balance_counter == 0:\n            groups.append(current_group)\n            current_group = \"\"\n\n    return groups\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, this function returns\n    the decimal part of the number, which is the leftover part\n    after subtracting the largest integer smaller than the given number.\n\n    :param number: A positive floating point number.\n    :return: The decimal part of the number.\n\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Input must be a positive floating point number.\")\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \n    Examples:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    # Iterate through each operation\n    for operation in operations:\n        # Update the balance with the current operation\n        balance += operation\n        # Check if the balance has fallen below zero\n        if balance < 0:\n            return True\n    # If no operation causes the balance to drop below zero, return False\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Calculate the Mean Absolute Deviation (MAD) of a list of numbers.\n    For an empty list, returns 0.0.\n\n    Args:\n        numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n        float: The mean absolute deviation of the numbers.\n    \"\"\"\n    if not numbers:\n        return 0.0\n    \n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the total absolute deviation from the mean\n    total_absolute_deviation = sum(abs(number - mean) for number in numbers)\n    \n    # Calculate the mean absolute deviation\n    mad = total_absolute_deviation / len(numbers)\n    \n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n    n = len(numbers)\n\n    for i in range(n):\n        result.append(numbers[i])\n        # Append the delimiter unless it's the last element\n        if i != n - 1:\n            result.append(delimiter)\n\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        for char in group:\n            if char == '(':  # Increment depth for opening parenthesis\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)  # Update max depth if needed\n            elif char == ')':  # Decrement depth for closing parenthesis\n                current_depth -= 1\n                if current_depth < 0:\n                    raise ValueError(\"Unbalanced parentheses detected\")\n        \n        if current_depth != 0:\n            raise ValueError(\"Unbalanced parentheses detected\")\n        \n        result.append(max_depth)\n    \n    return result\n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Using list comprehension for more concise and readable code\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nfrom functools import reduce\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Handle the special case of an empty list\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = reduce(operator.mul, numbers, 1)\n    \n    return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Generate a list of rolling maximum elements found until each point in the sequence.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    List[int]: A list of rolling maximum values.\n\n    Examples:\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n\n    >>> rolling_max([])\n    []\n    \"\"\"\n    if not numbers:\n        return []\n    \n    rolling_max_values = []\n    rolling_max_value = numbers[0]\n    \n    for num in numbers:\n        if num > rolling_max_value:\n            rolling_max_value = num\n        rolling_max_values.append(rolling_max_value)\n    \n    return rolling_max_values\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    n = len(string)\n    # Iterate over the string to find the longest palindromic suffix\n    for i in range(n):\n        # Check if the substring from i to end is a palindrome\n        if is_palindrome(string[i:]):\n            # Found the longest palindromic suffix\n            break\n\n    # The prefix that needs to be reversed and appended\n    prefix = string[:i]\n    reversed_prefix = prefix[::-1]\n\n    # Return the original string with the reversed prefix appended\n    return string + reversed_prefix\n"}
{"task_id": "HumanEval/11", "completion": "import re\n\ndef string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    if not (re.fullmatch('[01]+', a) and re.fullmatch('[01]+', b)):\n        raise ValueError(\"Input strings must contain only '0' and '1'\")\n    \n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Return the longest string from a list of strings. If there are multiple strings\n    of the same maximum length, return the first one encountered. Return None if the list is empty.\n\n    Args:\n        strings (List[str]): A list of strings to evaluate.\n\n    Returns:\n        Optional[str]: The longest string, or None if the list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    \n    for current_string in strings:\n        if len(current_string) > len(longest_string):\n            longest_string = current_string\n    \n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b.\n    If both a and b are zero, return 0 as a convention.\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Handle the case where both a and b are zero\n    if a == 0 and b == 0:\n        return 0\n    \n    # Use absolute values to handle negative inputs\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return a list of all prefixes from shortest to longest of the input string.\n\n    :param string: The input string to generate prefixes from.\n    :return: A list containing all prefixes of the input string.\n    \"\"\"\n    prefixes = []\n    # Iterate over the string indices to create prefixes\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    \n    Args:\n        n (int): The upper limit of the sequence, inclusive.\n\n    Returns:\n        str: A space-delimited string of numbers from 0 to n.\n    \n    Examples:\n        >>> string_sequence(0)\n        '0'\n        >>> string_sequence(5)\n        '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"Given a string, find out how many distinct characters (regardless of case) it consists of.\"\"\"\n    normalized_string = string.lower()\n    unique_characters = set(normalized_string)\n    return len(unique_characters)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return a list of integers corresponding to how many beats each\n    note lasts.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Mapping of note symbols to their respective beat counts\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split the input string into individual notes\n    notes = music_string.split()\n    \n    # Convert each note to its beat count using the dictionary\n    beats = [note_to_beats[note] for note in notes]\n    \n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string, including overlapping cases.\"\"\"\n    if not substring or not string:\n        return 0\n\n    count = 0\n    index = 0\n    substring_length = len(substring)\n    string_length = len(string)\n\n    # Iterate through the string until the remaining part is shorter than the substring\n    while index <= string_length - substring_length:\n        # Check if the current slice matches the substring\n        if string[index:index + substring_length] == substring:\n            count += 1\n        # Move to the next character\n        index += 1\n\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a space-delimited string of number words from 'zero' to 'nine'.\n\n    Args:\n        numbers (str): A string of number words separated by spaces.\n\n    Returns:\n        str: A string with the number words sorted in numerical order.\n    \"\"\"\n    if not numbers:\n        return ''\n    \n    number_words = numbers.split()\n    \n    word_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Convert words to numbers, sort them, and convert back to words\n    sorted_words = sorted(number_words, key=lambda word: word_to_number[word])\n    \n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n\n    numbers.sort()\n    minimum_difference = numbers[1] - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n\n    for i in range(1, len(numbers) - 1):\n        current_difference = numbers[i + 1] - numbers[i]\n        if current_difference < minimum_difference:\n            minimum_difference = current_difference\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Handle edge case where all numbers are the same\n    if min_value == max_value:\n        return [0.0] * len(numbers)\n\n    # Rescale numbers using list comprehension\n    return [(num - min_value) / (max_value - min_value) for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter the given list to return only integer values.\n\n    Parameters:\n    values (List[Any]): A list containing elements of any data type.\n\n    Returns:\n    List[int]: A list containing only the integer elements from the input list.\n\n    Examples:\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    >>> filter_integers([])\n    []\n    >>> filter_integers(['a', 'b', 'c'])\n    []\n    \"\"\"\n    return [element for element in values if isinstance(element, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"Return the length of the given string.\n    \n    Args:\n        string (str): The string for which the length is to be calculated.\n\n    Returns:\n        int: The length of the string.\n\n    Examples:\n        >>> strlen('')\n        0\n        >>> strlen('abc')\n        3\n    \"\"\"\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest divisor of a number 'n' that is smaller than 'n'.\n\n    Parameters:\n    n (int): The number to find the divisor for.\n\n    Returns:\n    int: The largest divisor of 'n' smaller than 'n'.\n\n    Raises:\n    ValueError: If 'n' is less than or equal to 1, as no valid divisor exists.\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"No divisors exist for numbers less than or equal to 1.\")\n\n    # Iterate backwards from n-1 to find the largest divisor\n    for d in range(n - 1, 0, -1):\n        if n % d == 0:\n            return d\n\n    # This line is theoretically unreachable\n    return 1  # Default return for completeness, though not needed"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []  # Factorization is not defined for numbers less than 2\n\n    factors = []\n    candidate = 2\n    # Check for each candidate divisor up to the square root of n\n    while candidate * candidate <= n:\n        # If candidate is a factor, divide n by candidate and add it to the list\n        while n % candidate == 0:\n            factors.append(candidate)\n            n //= candidate\n        candidate += 1\n    # If n is greater than 1, it is a prime factor\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\nfrom collections import defaultdict\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    frequency = defaultdict(int)\n    result = []\n    \n    for num in numbers:\n        frequency[num] += 1\n    \n    for num in numbers:\n        if frequency[num] == 1:\n            result.append(num)\n    \n    return result\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" \n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    Non-alphabetic characters remain unchanged.\n    \n    Examples:\n    >>> flip_case('Hello')\n    'hELLO'\n    >>> flip_case('WORLD')\n    'world'\n    >>> flip_case('123')\n    '123'\n    >>> flip_case('')\n    ''\n    \"\"\"\n    return ''.join(char.upper() if char.islower() else char.lower() if char.isupper() else char for char in string)\n"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that start with a given prefix.\n    Args:\n        strings (List[str]): The list of strings to filter.\n        prefix (str): The prefix to filter strings by.\n    Returns:\n        List[str]: A list of strings that start with the given prefix.\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(numbers: list) -> list:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [number for number in numbers if number > 0]"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    limit = math.isqrt(n)\n    i = 5\n    while i <= limit:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum(coeff * (x ** i) for i, coeff in enumerate(xs))\n\n\ndef find_zero(xs: list) -> float:\n    INITIAL_A = -10\n    INITIAL_B = 10\n    TOLERANCE = 1e-7\n    MAX_ITERATIONS = 1000\n    MAX_ADJUSTMENTS = 100\n\n    a, b = INITIAL_A, INITIAL_B\n    poly_a, poly_b = poly(xs, a), poly(xs, b)\n\n    adjustments = 0\n    while poly_a * poly_b >= 0 and adjustments < MAX_ADJUSTMENTS:\n        a -= 10\n        b += 10\n        poly_a, poly_b = poly(xs, a), poly(xs, b)\n        adjustments += 1\n\n    if adjustments == MAX_ADJUSTMENTS:\n        raise ValueError(\"Unable to find initial range that brackets a root.\")\n\n    iteration = 0\n    while (b - a) > TOLERANCE and iteration < MAX_ITERATIONS:\n        m = (a + b) / 2\n        poly_m = poly(xs, m)\n\n        if abs(poly_m) < TOLERANCE:\n            return m\n\n        if poly_a * poly_m < 0:\n            b = m\n            poly_b = poly_m\n        else:\n            a = m\n            poly_a = poly_m\n\n        iteration += 1\n\n    return (a + b) / 2"}
{"task_id": "HumanEval/33", "completion": "def sort_third(input_list: list) -> list:\n    \"\"\"This function takes a list input_list and returns a new list such that\n    the elements at indices divisible by three are sorted, while other elements\n    remain in their original positions.\n\n    Args:\n        input_list (list): The list to be processed.\n\n    Returns:\n        list: A new list with sorted elements at indices divisible by three.\n    \"\"\"\n    # Find indices that are divisible by three\n    indices_div_by_three = [i for i in range(len(input_list)) if i % 3 == 0]\n    # Extract and sort values at these indices\n    values_to_sort = sorted(input_list[i] for i in indices_div_by_three)\n    \n    # Create a new list to store the result\n    result = []\n    sorted_index = 0\n    \n    # Construct the result list\n    for i in range(len(input_list)):\n        if i % 3 == 0:\n            result.append(values_to_sort[sorted_index])\n            sorted_index += 1\n        else:\n            result.append(input_list[i])\n    \n    return result"}
{"task_id": "HumanEval/34", "completion": "def unique(input_list: list) -> list:\n    \"\"\"Return sorted unique elements in a list.\n\n    Args:\n        input_list (list): The list from which to extract unique elements.\n\n    Returns:\n        list: A sorted list of unique elements.\n\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_set = set(input_list)\n    unique_list = list(unique_set)\n    unique_list.sort()\n    return unique_list\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(elements: list):\n    \"\"\"Return the maximum element in the list.\n    If the list is empty, return None.\n    \n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    >>> max_element([])\n    None\n    \"\"\"\n    if not elements:  # Check if the list is empty\n        return None\n    max_value = elements[0]\n    for current_element in elements[1:]:\n        if current_element > max_value:\n            max_value = current_element\n    return max_value\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit '7' appears in integers less than 'n' \n    which are divisible by 11 or 13.\"\"\"\n    count_of_sevens = 0\n    for i in range(n):\n        # Check if the number is divisible by 11 or 13\n        if i % 11 == 0 or i % 13 == 0:\n            # Convert the number to a string to count '7's\n            number_str = str(i)\n            # Count occurrences of '7' in the string\n            sevens_count = number_str.count('7')\n            # Add the count to the total\n            count_of_sevens += sevens_count\n    return count_of_sevens"}
{"task_id": "HumanEval/37", "completion": "from typing import List\n\ndef sort_even(lst: List[int]) -> List[int]:\n    \"\"\"This function takes a list lst and returns a list l' such that\n    l' is identical to lst in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of lst, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indexed_elements = sorted(lst[i] for i in range(0, len(lst), 2))\n    even_index_pointer = 0\n    \n    result = [\n        even_indexed_elements[even_index_pointer] if i % 2 == 0 else lst[i]\n        for i in range(len(lst))\n        if not (even_index_pointer := even_index_pointer + (i % 2 == 0))\n    ]\n    \n    return result\n"}
{"task_id": "HumanEval/38", "completion": "def split_into_groups(s: str, group_size: int = 3):\n    \"\"\"\n    Helper function to split a string into groups of a specified size.\n    \"\"\"\n    return [s[i:i + group_size] for i in range(0, len(s), group_size)]\n\n\ndef encode_cyclic(s: str) -> str:\n    \"\"\"\n    Returns an encoded string by cycling groups of three characters.\n    \"\"\"\n    groups = split_into_groups(s)\n    # Cycle elements in each group unless the group has fewer elements than 3.\n    cycled_groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(cycled_groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Takes as input a string encoded with the encode_cyclic function and returns the decoded string.\n    \"\"\"\n    groups = split_into_groups(s)\n    # Reverse the cycling applied during encoding.\n    decoded_groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(decoded_groups)\n"}
{"task_id": "HumanEval/39", "completion": "import math\n\n\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef fibonacci_generator():\n    prev_fib, curr_fib = 0, 1\n    while True:\n        yield curr_fib\n        prev_fib, curr_fib = curr_fib, prev_fib + curr_fib\n\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    for fib_number in fibonacci_generator():\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(nums: list[int]) -> bool:\n    \"\"\"\n    Determines if there are three distinct elements in the list that sum to zero.\n\n    Args:\n    nums (list[int]): A list of integers.\n\n    Returns:\n    bool: True if there are three distinct elements that sum to zero, False otherwise.\n    \"\"\"\n    if len(nums) < 3:\n        return False\n\n    nums.sort()\n\n    for i in range(len(nums) - 2):\n        # Avoid duplicates for the first element\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n\n        left, right = i + 1, len(nums) - 1\n\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n\n            # Skip duplicates for the second and third elements\n            while left < right and nums[left] == nums[left - 1]:\n                left += 1\n            while left < right and nums[right] == nums[right + 1]:\n                right -= 1\n\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars.\n\n    Parameters:\n    n (int): The number of cars moving in each direction.\n\n    Returns:\n    int: The number of collisions, which is equal to n.\n    \"\"\"\n    # Each car moving left to right will collide with exactly one car moving right to left.\n    # Therefore, the number of collisions is equal to the number of cars in one direction, n.\n    return n\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(numbers: list) -> list:\n    \"\"\"Increment each element in the list by 1 and return the new list.\n    \n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [element + 1 for element in numbers]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(numbers: list) -> bool:\n    \"\"\"\n    Determines if there are two distinct elements in the list that sum to zero.\n    \n    :param numbers: List of integers.\n    :return: True if there are two distinct elements that sum to zero, False otherwise.\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    \n    seen_numbers = set()\n    \n    for num in numbers:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    \n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base <= 1 or base >= 10:\n        raise ValueError(\"Base must be greater than 1 and less than 10.\")\n\n    if x == 0:\n        return '0'\n    \n    digits = []\n    \n    while x > 0:\n        remainder = x % base\n        digits.append(str(remainder))\n        x = x // base\n    \n    # Reverse the digits using list slicing\n    result = ''.join(digits[::-1])\n    \n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Calculate the area of a triangle given its base and height.\n    \n    Args:\n        a (float): The length of the base of the triangle.\n        h (float): The height of the triangle.\n    \n    Returns:\n        float: The area of the triangle.\n    \n    Raises:\n        ValueError: If either the base or height is negative.\n    \n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    if a < 0 or h < 0:\n        raise ValueError(\"Base and height must be non-negative.\")\n    return (a * h) / 2\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    \"\"\"\n    The Fib4 number sequence is a sequence similar to the Fibonacci sequence defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    \"\"\"\n    # Initial values for fib4(0), fib4(1), fib4(2), fib4(3)\n    fib4_n_minus_4, fib4_n_minus_3, fib4_n_minus_2, fib4_n_minus_1 = 0, 0, 2, 0\n    \n    if n == 0:\n        return fib4_n_minus_4\n    if n == 1:\n        return fib4_n_minus_3\n    if n == 2:\n        return fib4_n_minus_2\n    if n == 3:\n        return fib4_n_minus_1\n    \n    # Calculate fib4(n) for n >= 4\n    for _ in range(4, n + 1):\n        current = fib4_n_minus_4 + fib4_n_minus_3 + fib4_n_minus_2 + fib4_n_minus_1\n        # Shift the sequence\n        fib4_n_minus_4, fib4_n_minus_3, fib4_n_minus_2, fib4_n_minus_1 = (\n            fib4_n_minus_3, fib4_n_minus_2, fib4_n_minus_1, current\n        )\n    \n    return fib4_n_minus_1"}
{"task_id": "HumanEval/47", "completion": "def median(numbers: list) -> float:\n    \"\"\"Return the median of elements in the list numbers.\n\n    Parameters:\n    numbers (list): A list of numerical values.\n\n    Returns:\n    float: The median of the list.\n\n    Raises:\n    ValueError: If the list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list cannot be empty\")\n\n    sorted_list = sorted(numbers)\n    n = len(sorted_list)\n\n    if n % 2 == 1:\n        middle_index = n // 2\n        median_value = sorted_list[middle_index]\n    else:\n        middle_index1 = (n // 2) - 1\n        middle_index2 = n // 2\n        median_value = (sorted_list[middle_index1] + sorted_list[middle_index2]) / 2\n\n    return median_value"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    left, right = 0, len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p.\n    \"\"\"\n    if n == 0:\n        return 1\n    if p <= 0:\n        raise ValueError(\"p must be a positive integer\")\n    if p == 1:\n        return 0\n    \n    result = 1\n    current_power = 2\n    \n    while n > 0:\n        # If n is odd, multiply the current power of 2 to the result\n        if n % 2 == 1:\n            result = (result * current_power) % p\n        # Square the base\n        current_power = (current_power * current_power) % p\n        # Divide n by 2\n        n = n // 2\n    \n    return result\n"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str) -> str:\n    \"\"\"\n    Decodes a string that was encoded by shifting each character by 5 positions in the alphabet.\n    Assumes the input string only contains lowercase alphabetic characters ('a' to 'z').\n    \"\"\"\n    return ''.join(\n        chr(((ord(ch) - 5 - ord('a') + 26) % 26) + ord('a')) for ch in s\n    )\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns the string without vowels.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    # Use list comprehension to filter out vowels\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(numbers: list, threshold: int) -> bool:\n    if not numbers:\n        return True\n    for num in numbers:\n        if num >= threshold:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    Returns True if both strings contain the exact same set of characters, regardless of order or frequency.\n    \n    Examples:\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    >>> same_chars('', '')\n    True\n    >>> same_chars('a', '')\n    False\n    \"\"\"\n    chars_s0 = set(s0)\n    chars_s1 = set(s1)\n    return chars_s0 == chars_s1"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Calculate the n-th Fibonacci number.\n    \n    Args:\n        n (int): The position in the Fibonacci sequence (0-indexed).\n\n    Returns:\n        int: The n-th Fibonacci number.\n    \n    Examples:\n        >>> fib(10)\n        55\n        >>> fib(1)\n        1\n        >>> fib(8)\n        21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # Initialize the first two Fibonacci numbers\n    fib_minus_two, fib_minus_one = 0, 1\n    for _ in range(2, n + 1):\n        # Calculate the current Fibonacci number\n        current_fib = fib_minus_one + fib_minus_two\n        # Update the previous two Fibonacci numbers\n        fib_minus_two, fib_minus_one = fib_minus_one, current_fib\n\n    return fib_minus_one\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"Check if every opening bracket '<' has a corresponding closing bracket '>'.\n\n    Args:\n        brackets (str): A string consisting only of '<' and '>'.\n\n    Returns:\n        bool: True if every opening bracket has a corresponding closing bracket, False otherwise.\n\n    \"\"\"\n    balance = 0\n    for character in brackets:\n        if character == '<':\n            balance += 1\n        elif character == '>':\n            if balance > 0:\n                balance -= 1\n            else:\n                return False\n    return balance == 0\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(lst: list) -> bool:\n    \"\"\"\n    Determine if the list elements are monotonically increasing or decreasing.\n\n    A list is considered monotonically increasing if each element is greater than or equal to the previous one, \n    and monotonically decreasing if each element is less than or equal to the previous one.\n\n    Args:\n        lst (list): A list of comparable elements.\n\n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for current, next in zip(lst, lst[1:]):\n        if current > next:\n            is_increasing = False\n        if current < next:\n            is_decreasing = False\n\n        if not is_increasing and not is_decreasing:\n            break\n\n    return is_increasing or is_decreasing\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: A sorted list of unique common elements from l1 and l2.\n\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1 & set2\n    return sorted(common_elements)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    largest_prime_factor = 0\n\n    # Remove all factors of 2\n    while n % 2 == 0:\n        n //= 2\n        largest_prime_factor = 2\n\n    # Check for odd factors from 3 upwards\n    divisor = 3\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            n //= divisor\n            largest_prime_factor = divisor\n        divisor += 2\n\n    # If n is still greater than 1, then it is a prime number\n    if n > 1:\n        largest_prime_factor = n\n\n    return largest_prime_factor\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"Return True if every opening bracket has a corresponding closing bracket.\n\n    Args:\n        brackets (str): A string consisting of '(' and ')'.\n\n    Returns:\n        bool: True if the brackets are correctly matched, False otherwise.\n\n    Examples:\n        >>> correct_bracketing(\"(\")\n        False\n        >>> correct_bracketing(\"()\")\n        True\n        >>> correct_bracketing(\"(()())\")\n        True\n        >>> correct_bracketing(\")(()\")\n        False\n    \"\"\"\n    balance = 0\n    for char in brackets:\n        if char == '(': \n            balance += 1\n        elif char == ')':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    \"\"\"\n    Calculate the derivative of a polynomial given its coefficients.\n\n    Args:\n        xs (list): A list of coefficients, where the i-th element represents the coefficient of x^i.\n\n    Returns:\n        list: A list of coefficients representing the derivative of the polynomial.\n\n    Examples:\n        >>> derivative([3, 1, 2, 4, 5])\n        [1, 4, 12, 20]\n        >>> derivative([1, 2, 3])\n        [2, 6]\n        >>> derivative([5])\n        []  # Derivative of a constant is zero.\n        >>> derivative([])\n        []  # No polynomial, hence no derivative.\n    \"\"\"\n    if len(xs) <= 1:\n        return []  # No derivative if the polynomial is a constant or non-existent.\n\n    derivative_coeffs = []\n    for i in range(1, len(xs)):\n        derivative_coeffs.append(i * xs[i])\n\n    return derivative_coeffs"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"\n    Compute the n-th element of the FibFib number sequence.\n    The sequence is defined as:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) for n >= 3.\n\n    Uses an iterative approach with constant space complexity.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    a, b, c = 0, 0, 1\n\n    for _ in range(3, n + 1):\n        next_value = a + b + c\n        a, b, c = b, c, next_value\n\n    return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    vowel_count = 0\n    standard_vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    for char in s:\n        if char in standard_vowels:\n            vowel_count += 1\n\n    # Check if the last character is 'y', considering it as a vowel if it is.\n    if s.endswith('y'):\n        vowel_count += 1\n\n    return vowel_count\n\n# Test cases\nprint(vowels_count(\"bcdfg\")) # Expected output: 0\nprint(vowels_count(\"happy\")) # Expected output: 1\nprint(vowels_count(\"AEIOU\")) # Expected output: 5\nprint(vowels_count(\"XyloPhone\")) # Expected output: 3\nprint(vowels_count(\"\")) # Expected output: 0\nprint(vowels_count(\"rhythm\")) # Expected output: 0\nprint(vowels_count(\"sky\")) # Expected output: 1\nprint(vowels_count(\"SkY\")) # Expected output: 1"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circularly shift the digits of the integer x to the right by 'shift' positions.\n    If 'shift' is greater than or equal to the number of digits, return the digits reversed.\n    \n    Args:\n        x (int): The integer whose digits are to be shifted.\n        shift (int): The number of positions to shift the digits.\n    \n    Returns:\n        str: The resulting number after the circular shift as a string.\n    \n    Examples:\n        >>> circular_shift(12, 1)\n        '21'\n        >>> circular_shift(12, 2)\n        '12'\n    \"\"\"\n    str_x = str(x)\n    n = len(str_x)\n    \n    if shift >= n:\n        return str_x[::-1]\n    \n    effective_shift = shift % n\n    shifted_part = str_x[-effective_shift:]\n    remaining_part = str_x[:-effective_shift]\n    \n    return shifted_part + remaining_part\n"}
{"task_id": "HumanEval/66", "completion": "def uppercaseAsciiSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the ASCII codes of the uppercase characters only.\n\n    Examples:\n        uppercaseAsciiSum(\"\") => 0\n        uppercaseAsciiSum(\"abAB\") => 131\n        uppercaseAsciiSum(\"abcCd\") => 67\n        uppercaseAsciiSum(\"helloE\") => 69\n        uppercaseAsciiSum(\"woArBld\") => 131\n        uppercaseAsciiSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Split the input string into words\n    words = s.split()\n    \n    # Extract the number of apples from the first word\n    number_of_apples = int(words[0])\n    \n    # Find the index of the word 'and'\n    and_index = words.index('and')\n    \n    # Extract the number of oranges from the word following 'and'\n    number_of_oranges = int(words[and_index + 1])\n    \n    # Calculate the number of mangoes\n    number_of_mangoes = n - (number_of_apples + number_of_oranges)\n    \n    # Return the number of mangoes\n    return number_of_mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # Initialize variables to track the smallest even value and its index\n    min_even_value = float('inf')\n    min_index = -1\n\n    # Iterate over the array with both index and value\n    for i, value in enumerate(arr):\n        # Check if the value is even\n        if value % 2 == 0:\n            # Update the smallest even value and its index if a smaller even value is found\n            if value < min_even_value:\n                min_even_value = value\n                min_index = i\n\n    # If no even number was found, return an empty list\n    if min_index == -1:\n        return []\n    else:\n        # Return the smallest even value and its index\n        return [min_even_value, min_index]"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef search(lst):\n    # Use Counter to count frequencies\n    frequency_dict = Counter(lst)\n\n    # Find the greatest integer that satisfies the condition\n    max_valid_int = max((key for key, value in frequency_dict.items() if value >= key), default=-1)\n\n    return max_valid_int\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given a list of integers, return the list sorted in a 'strange' order.\n    Strange sorting is defined as starting with the minimum value,\n    then the maximum of the remaining integers, then the next minimum, and so on.\n\n    Parameters:\n    lst (list): A list of integers to be sorted.\n\n    Returns:\n    list: A new list sorted in the described 'strange' order.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    \n    lst.sort()\n    left, right = 0, len(lst) - 1\n    result = []\n    \n    while left <= right:\n        # Append the smallest remaining element\n        result.append(lst[left])\n        left += 1\n        # Append the largest remaining element, if it exists\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    \n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Calculate the area of a triangle given the lengths of its three sides.\n    Return the area rounded to 2 decimal places if the sides form a valid triangle.\n    Otherwise, return -1.\n    '''\n    # Check if the input side lengths form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Return the area rounded to 2 decimal places\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q: list, w: int) -> bool:\n    \"\"\"\n    Determines if the object q will fly based on two conditions:\n    1. The list q is a palindrome.\n    2. The sum of q's elements is less than or equal to the maximum weight w.\n\n    :param q: A list of integers representing the object.\n    :param w: An integer representing the maximum possible weight.\n    :return: True if the object will fly, False otherwise.\n    \"\"\"\n    # Check if the list is a palindrome\n    is_palindrome = q == q[::-1]\n    # Calculate the sum of the list elements\n    total_sum = sum(q)\n    # Return true if both conditions are satisfied\n    return is_palindrome and total_sum <= w\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    changes_needed = 0\n    # Iterate over the first half of the array\n    for i in range(n // 2):\n        # Compare element with its mirrored counterpart\n        if arr[i] != arr[n - i - 1]:\n            changes_needed += 1\n\n    return changes_needed\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Compare two lists of strings and return the list with fewer total characters.\n\n    Parameters:\n    lst1 (list of str): The first list of strings.\n    lst2 (list of str): The second list of strings.\n\n    Returns:\n    list of str: The list with fewer total characters, or the first list if both have the same number.\n    '''\n    # Calculate the total number of characters in lst1\n    total_chars_lst1 = sum(len(string) for string in lst1)\n    # Calculate the total number of characters in lst2\n    total_chars_lst2 = sum(len(string) for string in lst2)\n\n    # Compare the total characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 2:\n        return False\n    \n    primes = [2, 3, 5, 7]\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                product = primes[i] * primes[j] * primes[k]\n                if product == a:\n                    return True\n                if product > a:\n                    break\n    \n    return False\n\n# Testing the function\nprint(is_multiply_prime(30))  # Should return True\nprint(is_multiply_prime(31))  # Should return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, otherwise False.\n    A number x is a simple power of n if there exists an integer k such that n^k = x.\n    \"\"\"\n    if x == 1:\n        # Any number to the power of 0 is 1\n        return True\n    if n <= 1:\n        # If n is 1 or less, x cannot be a simple power unless x is 1\n        return False\n    \n    while x > 1:\n        if x % n != 0:\n            return False\n        x //= n\n    \n    return x == 1\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    # Check if cubing the cube_root gives the original number\n    return cube_root ** 3 == abs(a)\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    # Set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    prime_count = 0\n\n    if not num:\n        return 0\n\n    for digit in num:\n        if digit in prime_hex_digits:\n            prime_count += 1\n\n    return prime_count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to a binary string formatted with 'db' at the start and end.\n\n    Args:\n    decimal (int): A non-negative integer to convert.\n\n    Returns:\n    str: A string representing the binary format of the input with 'db' at both ends.\n    \"\"\"\n    # Ensure the input is a non-negative integer\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Convert the decimal number to a binary string\n    binary_string = bin(decimal)\n    # Remove the '0b' prefix from the binary string\n    binary_digits = binary_string[2:]\n    # Format the string with 'db' at the beginning and end\n    formatted_string = \"db\" + binary_digits + \"db\"\n    return formatted_string\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"Check if the string is happy. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\"\"\"\n    # If the string length is less than 3, it cannot be happy\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string, checking each set of 3 consecutive characters\n    for i in range(len(s) - 2):\n        consecutive_chars = s[i:i+3]\n        # Use a set to check if all three characters are distinct\n        if len(set(consecutive_chars)) != 3:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    gpa_to_letter = [\n        (4.0, 'A+'), (3.7, 'A'), (3.3, 'A-'), (3.0, 'B+'), \n        (2.7, 'B'), (2.3, 'B-'), (2.0, 'C+'), (1.7, 'C'), \n        (1.3, 'C-'), (1.0, 'D+'), (0.7, 'D'), (0.0, 'D-')\n    ]\n    \n    letter_grades = []\n    \n    for gpa in grades:\n        if gpa < 0:\n            raise ValueError(\"GPA cannot be negative\")\n        for threshold, grade in gpa_to_letter:\n            if gpa >= threshold:\n                letter_grades.append(grade)\n                break\n    \n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    def is_prime(num):\n        \"\"\"Check if a number is a prime number.\"\"\"\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    length = len(string)\n    return is_prime(length)\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    if n == 1:\n        return 2  # The numbers are 1 and 1\n    \n    # Count of numbers starting with 1: 1XXX... (n-1 digits after 1)\n    start_with_1_count = 10 ** (n - 1)\n    # Count of numbers ending with 1: XXX...1 (n-1 digits before 1, not starting with 0)\n    end_with_1_count = 9 * (10 ** (n - 2))\n    # Count of numbers starting and ending with 1: 1XX...1 (n-2 digits between)\n    start_and_end_with_1_count = 10 ** (n - 2)\n    \n    # Total count is the sum of starting or ending with 1 minus the overlap\n    total_count = start_with_1_count + end_with_1_count - start_and_end_with_1_count\n    \n    return total_count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example:\n        For N = 1000, the sum of digits will be 1, the output should be \"1\".\n        For N = 150, the sum of digits will be 6, the output should be \"110\".\n        For N = 147, the sum of digits will be 12, the output should be \"1100\".\n    \n    Args:\n        N (int): A non-negative integer (0 \u2264 N \u2264 10000).\n    \n    Returns:\n        str: A string representing the binary form of the sum of the digits of N.\n    \"\"\"\n    # Convert the integer N to a string to iterate over each digit\n    str_N = str(N)\n    \n    # Calculate the sum of the digits by converting each character back to an integer\n    digit_sum = sum(int(char) for char in str_N)\n    \n    # Convert the sum to a binary string and remove the '0b' prefix\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst: list[int]) -> int:\n    \"\"\"Calculate the sum of even integers located at odd indices in the list.\n\n    Args:\n        lst (list[int]): A non-empty list of integers.\n\n    Returns:\n        int: The sum of even integers at odd indices.\n    \"\"\"\n    sum_even_at_odd_indices = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_at_odd_indices += lst[i]\n    return sum_even_at_odd_indices"}
{"task_id": "HumanEval/86", "completion": "import re\n\ndef anti_shuffle(s):\n    \"\"\"\n    Rearranges each word in the string `s` such that the characters are in ascending order by ASCII value,\n    while maintaining the order of words and spaces.\n    \n    :param s: Input string containing words and spaces\n    :return: A new string with each word's characters sorted\n    \"\"\"\n    # Split the string into segments of words or spaces\n    segments = re.findall(r'(\\S+|\\s+)', s)\n    result = []\n    for word_or_space in segments:\n        # Check if the segment is a word (non-space characters)\n        if word_or_space.strip() != '':\n            sorted_word = ''.join(sorted(word_or_space))\n            result.append(sorted_word)\n        else:\n            result.append(word_or_space)\n    # Join all segments back into a single string\n    ordered_string = ''.join(result)\n    return ordered_string\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Find coordinates of integer x in a 2D list and return them sorted by row and column.\n    Each coordinate is a tuple (row_index, column_index).\n    Coordinates are sorted by row in ascending order, and by column in descending order.\n    \"\"\"\n    result = []\n    # Traverse each row and column to find the occurrences of x\n    for row_index, row in enumerate(lst):\n        for col_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, col_index))\n    # Sort by row (ascending), and column (descending)\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    # Calculate the sum of the first and last elements\n    boundary_sum = array[0] + array[-1]\n    \n    # Create a copy of the array to sort\n    sorted_array = array[:]\n    \n    # Sort in ascending or descending order based on the parity of the boundary sum\n    if boundary_sum % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    \n    return sorted_array\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting each lowercase letter by 4 positions in the alphabet.\n    Non-alphabetic characters are not modified.\n    \"\"\"\n    encrypted_string = []\n    \n    for char in s:\n        if 'a' <= char <= 'z':  # Only process lowercase alphabetic characters\n            original_index = ord(char) - ord('a')\n            new_index = (original_index + 4) % 26\n            new_char = chr(new_index + ord('a'))\n            encrypted_string.append(new_char)\n        else:\n            # Append non-alphabetic characters unchanged\n            encrypted_string.append(char)\n    \n    return ''.join(encrypted_string)\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    first_min = second_min = float('inf')\n    \n    for number in lst:\n        if number < first_min:\n            second_min = first_min\n            first_min = number\n        elif first_min < number < second_min:\n            second_min = number\n    \n    # If second_min is still infinity, it means there was no second unique number\n    return second_min if second_min != float('inf') else None\n"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    # Split the input string into sentences based on '.', '?', or '!'\n    sentences = re.split(r'[.?!]', S)\n    # Initialize boredom count\n    boredom_count = 0\n    \n    # Iterate over each sentence\n    for sentence in sentences:\n        # Trim whitespace and check if the sentence starts with 'I'\n        trimmed_sentence = sentence.strip()\n        if trimmed_sentence.startswith('I'):\n            boredom_count += 1\n    \n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return any(\n            x == y + z,\n            y == x + z,\n            z == x + y\n        )\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Mapping of vowels to their replacements\n    vowel_mapping = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    # Initialize an empty list to build the encoded message\n    encoded_message = []\n    \n    # Process each character in the input message\n    for char in message:\n        # Swap the case of the character\n        char = char.swapcase()\n        \n        # Replace the character if it's a vowel\n        if char in vowel_mapping:\n            char = vowel_mapping[char]\n        \n        # Append the processed character to the result list\n        encoded_message.append(char)\n    \n    # Join the list into a string and return the encoded message\n    return ''.join(encoded_message)"}
{"task_id": "HumanEval/94", "completion": "def is_prime(num):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef sum_of_digits_of_largest_prime(lst):\n    \"\"\"\n    Find the largest prime number in a list and return the sum of its digits.\n    If no prime number is found, return 0.\n    \"\"\"\n    largest_prime = -1\n    for number in lst:\n        if is_prime(number) and number > largest_prime:\n            largest_prime = number\n\n    # If no prime number was found, return 0\n    if largest_prime == -1:\n        return 0\n\n    # Calculate the sum of the digits of the largest prime\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n\n    # Initialize flags to check the case of the first string key\n    first_key_case = None\n\n    for key in dictionary:\n        if isinstance(key, str):\n            if first_key_case is None:\n                # Set the case based on the first string key\n                first_key_case = 'lower' if key.islower() else 'upper'\n            elif (first_key_case == 'lower' and not key.islower()) or \\\n                 (first_key_case == 'upper' and not key.isupper()):\n                return False\n\n    # If no string keys were found, return False\n    return first_key_case is not None"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"\n    Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    if n <= 1:\n        # Return an empty list if n is less than or equal to 1, since there are no primes less than 2.\n        return []\n    \n    primes = []\n    for x in range(2, n):\n        # Assume x is prime until proven otherwise.\n        is_prime = True\n        for divisor in range(2, int(x**0.5) + 1):\n            if x % divisor == 0:\n                # x is divisible by divisor, hence not prime.\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(x)\n    \n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    result = unit_digit_a * unit_digit_b\n    return result\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s: str) -> int:\n    \"\"\"\n    Count the number of uppercase vowels at even indices in the string s.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The count of uppercase vowels at even indices.\n    \"\"\"\n    UPPERCASE_VOWELS = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in UPPERCASE_VOWELS:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "import math\n\ndef closest_integer(value):\n    try:\n        float_value = float(value)\n    except ValueError:\n        raise ValueError('Invalid input: must be a string representing a number.')\n    \n    floor_value = math.floor(float_value)\n    ceil_value = math.ceil(float_value)\n    \n    if float_value - floor_value < ceil_value - float_value:\n        return floor_value\n    elif ceil_value - float_value < float_value - floor_value:\n        return ceil_value\n    else:\n        # Equidistant case\n        return ceil_value if float_value > 0 else floor_value"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n: int) -> list:\n    \"\"\"\n    Create a pile of stones with n levels, where the first level has n stones.\n    Each subsequent level has 2 more stones than the previous level.\n\n    Parameters:\n    n (int): The number of levels in the pile.\n\n    Returns:\n    list: A list where each element represents the number of stones in each level.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    stone_pile = []\n    stones_in_current_level = n\n    for _ in range(n):\n        stone_pile.append(stones_in_current_level)\n        stones_in_current_level += 2\n    return stone_pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    Splits the input string into words separated by commas or spaces and returns a list of words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    s = s.replace(',', ' ')\n    words_list = s.split()\n    return words_list\n"}
{"task_id": "HumanEval/102", "completion": "def largest_even_in_range(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    largest even integer number that is in the range [x, y] inclusive.\n    If there's no such number, then the function returns -1.\n\n    Parameters:\n    x (int): A positive integer representing one end of the range.\n    y (int): A positive integer representing the other end of the range.\n\n    Returns:\n    int: The largest even integer in the range [x, y] or -1 if none exists.\n    \"\"\"\n    # Ensure x and y are positive integers\n    if x <= 0 or y <= 0:\n        raise ValueError(\"Both x and y must be positive integers.\")\n\n    # Determine the bounds of the range\n    lower_bound = min(x, y)\n    upper_bound = max(x, y)\n    \n    # Check if the upper bound is even\n    if upper_bound % 2 == 0:\n        return upper_bound\n    \n    # Calculate the largest even candidate\n    largest_even_candidate = upper_bound - 1\n    \n    # Return the largest even candidate if it is within the range\n    if largest_even_candidate >= lower_bound:\n        return largest_even_candidate\n    \n    # Return -1 if no even number exists within the range\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    # Check if n is greater than m and return -1 if true\n    if n > m:\n        return -1\n    \n    # Calculate the sum of numbers from n to m using the formula for sum of an arithmetic series\n    total_sum = ((m - n + 1) * (n + m)) // 2\n    \n    # Calculate the count of numbers from n to m\n    count = m - n + 1\n    \n    # Calculate the average and round it to the nearest integer\n    rounded_average = round(total_sum / count)\n    \n    # Convert the rounded average to binary and return\n    return bin(rounded_average)\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that haven't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    even_digits = frozenset('02468')\n    result = [number for number in x if all(digit not in even_digits for digit in str(number))]\n    return sorted(result)\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Mapping of numbers to their corresponding names\n    number_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter numbers between 1 and 9\n    filtered_numbers = [number for number in arr if 1 <= number <= 9]\n    # Sort the numbers in descending order\n    filtered_numbers.sort(reverse=True)\n    \n    # Convert numbers to their corresponding names\n    names_list = [number_to_name[number] for number in filtered_numbers]\n    \n    return names_list"}
{"task_id": "HumanEval/106", "completion": "import math\n\ndef f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Use math.factorial for efficiency\n            result.append(math.factorial(i))\n        else:\n            # Calculate sum of numbers from 1 to i using formula\n            sum_value = i * (i + 1) // 2  # Sum of first i natural numbers\n            result.append(sum_value)\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    \"\"\"\n    Check if a given number is a palindrome.\n    \"\"\"\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    :param n: int, 1 <= n <= 1000\n    :return: tuple, (even_count, odd_count)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for number in arr:\n        number_str = str(number)\n        digit_sum = 0\n        for i, char in enumerate(number_str):\n            if char == '-':\n                continue\n            digit = int(char)\n            if i == 0 and number_str[0] == '-':\n                digit = -digit\n            digit_sum += digit\n        if digit_sum > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr or len(arr) == 1:\n        return True\n\n    n = len(arr)\n    breakpoints = 0\n\n    # Count the number of breakpoints where arr[i] > arr[i+1]\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            breakpoints += 1\n\n    # If there are no breakpoints, the array is already sorted.\n    # If there is exactly one breakpoint, check if the array can be rotated to be sorted.\n    return breakpoints == 0 or (breakpoints == 1 and arr[n-1] <= arr[0])\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"Determine if you can exchange elements between lst1 and lst2\n    to make all elements in lst1 even.\n    \"\"\"\n    # Count the number of odd numbers in lst1\n    count_odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    # Count the number of even numbers in lst2\n    count_even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1, return 'YES'\n    return \"YES\" if count_even_in_lst2 >= count_odd_in_lst1 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "from collections import Counter\n\ndef histogram(test):\n    if not test:\n        return {}\n    \n    # Split the input string into individual letters\n    letters = test.split()\n    \n    # Use Counter to count the frequency of each letter\n    frequency_count = Counter(letters)\n    \n    # Determine the maximum frequency\n    max_frequency = max(frequency_count.values())\n    \n    # Create a dictionary of letters with the maximum frequency\n    result_dict = {letter: count for letter, count in frequency_count.items() if count == max_frequency}\n    \n    return result_dict"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s: str, c: str) -> tuple[str, bool]:\n    \"\"\"\n    Remove all characters from the string 's' that are present in the string 'c',\n    then check if the resulting string is a palindrome.\n\n    Args:\n    s (str): The original string.\n    c (str): The string containing characters to be removed from 's'.\n\n    Returns:\n    tuple[str, bool]: A tuple containing the resulting string and a boolean indicating\n                      whether the resulting string is a palindrome.\n    \"\"\"\n    # Convert characters to be deleted into a set for efficient lookup\n    char_set = set(c)\n    # Filter out characters in 's' that are not in 'char_set'\n    filtered_chars = [char for char in s if char not in char_set]\n    # Join the filtered characters to form the result string\n    result_string = ''.join(filtered_chars)\n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    return result_string, is_palindrome\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element of the output should reflect the number of odd digits in each input string.\n    \"\"\"\n    # Define a set of odd digits\n    ODD_DIGITS = {'1', '3', '5', '7', '9'}\n    result = []\n    \n    for s in lst:\n        # Count the number of odd digits in the current string\n        count_of_odds = sum(1 for char in s if char in ODD_DIGITS)\n        # Format the output string by replacing 'i' with the count of odd digits\n        formatted_string = (\n            f\"the number of odd elements {count_of_odds}n the str{count_of_odds}ng \"\n            f\"{count_of_odds} of the {count_of_odds}nput.\"\n        )\n        result.append(formatted_string)\n    \n    return result\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list must not be empty\")\n\n    # Initialize variables to store the minimum sub-array sum ending at the current position\n    # and the overall minimum sub-array sum found so far.\n    min_ending_here = nums[0]\n    min_so_far = nums[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(nums)):\n        # Update the minimum sub-array sum ending at the current position\n        min_ending_here = min(min_ending_here + nums[i], nums[i])\n        # Update the overall minimum sub-array sum found so far\n        min_so_far = min(min_so_far, min_ending_here)\n    \n    return min_so_far"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Calculate the total number of water units across all wells\n    total_water_units = 0\n    for row in grid:\n        total_water_units += row.count(1)\n\n    # Calculate the number of times to lower the bucket\n    # Use ceiling of division to ensure all water is collected\n    return (total_water_units + capacity - 1) // capacity\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers according to the number of ones\n    in their binary representation in ascending order. For numbers with the\n    same number of ones, sort them based on their decimal value.\n\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 4, 3, 5]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 4, 3]\n    \"\"\"\n    if not arr:\n        return []\n\n    def calculate_sort_key(number):\n        count_of_ones = bin(number).count('1')\n        return (count_of_ones, number)\n\n    sorted_array = sorted(arr, key=calculate_sort_key)\n    return sorted_array"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    if not s.strip():  # Check for empty or whitespace-only string\n        return []\n    \n    words = s.split()\n    result = [word for word in words if sum(char in consonants for char in word) == n]\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\n    if len(word) < 3:\n        return \"\"\n\n    for index in range(len(word) - 2, 0, -1):\n        vowel_candidate = word[index]\n\n        if vowel_candidate in vowels:\n            previous_char = word[index - 1]\n            next_char = word[index + 1]\n\n            if previous_char not in vowels and next_char not in vowels:\n                return vowel_candidate\n\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def count_parentheses(s):\n        open_count = 0\n        close_count = 0\n        for c in s:\n            if c == '(': \n                open_count += 1\n            elif c == ')':\n                close_count += 1\n        return open_count, close_count\n\n    s1, s2 = lst\n    open_s1, close_s1 = count_parentheses(s1)\n    open_s2, close_s2 = count_parentheses(s2)\n\n    # Check if the difference between open and close is the same\n    # for both orders of concatenation\n    if (open_s1 - close_s1 + open_s2 - close_s2 == 0) or \\\n       (open_s2 - close_s2 + open_s1 - close_s1 == 0):\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "import heapq\n\ndef find_max_k_elements(arr, k):\n    \"\"\"\n    Return a sorted list of the maximum k numbers in arr.\n\n    Parameters:\n    arr (List[int]): The input array of integers.\n    k (int): The number of maximum elements to return.\n\n    Returns:\n    List[int]: A sorted list of the maximum k numbers in arr.\n    \"\"\"\n    if k == 0 or k > len(arr):\n        return []\n    \n    min_heap = arr[:k]\n    heapq.heapify(min_heap)\n    \n    for e in arr[k:]:\n        if e > min_heap[0]:\n            heapq.heappushpop(min_heap, e)\n    \n    return sorted(min_heap)\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all odd elements that are in even positions.\"\"\"\n    # Calculate the sum of odd elements located at even indices\n    return sum(element for i, element in enumerate(lst) if i % 2 == 0 and element % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Calculate the sum of elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        element = arr[i]\n        # Check if the element has at most two digits\n        if -99 <= element <= 99:\n            total_sum += element\n    return total_sum\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in the Collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_numbers = set()\n    current_number = n\n    \n    while current_number != 1:\n        if current_number % 2 != 0:\n            odd_numbers.add(current_number)\n            current_number = 3 * current_number + 1\n        else:\n            current_number //= 2\n    \n    odd_numbers.add(1)  # Ensure 1 is included\n    sorted_odds = sorted(odd_numbers)\n    return sorted_odds"}
{"task_id": "HumanEval/124", "completion": "def is_leap_year(year):\n    \"\"\"Check if a year is a leap year.\"\"\"\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n\n\ndef valid_date(date_string):\n    \"\"\"Validate the date string in the format mm-dd-yyyy.\"\"\"\n    if not date_string or len(date_string) != 10:\n        return False\n\n    # Check the format is mm-dd-yyyy\n    if date_string[2] != '-' or date_string[5] != '-':\n        return False\n\n    # Split the date string\n    try:\n        month, day, year = map(int, date_string.split('-'))\n    except ValueError:\n        return False\n\n    # Check month range\n    if month < 1 or month > 12:\n        return False\n\n    # Check year validity\n    if year <= 0:\n        return False\n\n    # Days in each month\n    days_in_month = {\n        1: 31, 2: 29 if is_leap_year(year) else 28, 3: 31, 4: 30,\n        5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n\n    # Check day range\n    if day < 1 or day > days_in_month.get(month, 0):\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace. If no whitespaces exist in the text, \n    split on commas ','. If no commas exist, return the number of lowercase letters with odd order in the alphabet.\n    \"\"\"\n    # Attempt to split the text by whitespace\n    words_by_space = txt.split()\n    if len(words_by_space) > 1:\n        return words_by_space\n\n    # Attempt to split the text by commas\n    words_by_comma = txt.split(',')\n    if len(words_by_comma) > 1:\n        return words_by_comma\n\n    # Count lowercase letters with odd positions in the alphabet\n    odd_count = sum(1 for char in txt if 'a' <= char <= 'z' and (ord(char) - ord('a')) % 2 == 1)\n    return odd_count\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    # Use a set to track seen elements\n    seen = set()\n\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n        if lst[i] in seen:\n            return False\n\n        seen.add(lst[i])\n\n    # Check the last element for duplicates\n    if lst[-1] in seen:\n        return False\n\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1: tuple, interval2: tuple) -> str:\n    # Unpack the start and end points of the intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Determine the start and end of the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # If the intervals do not intersect, return \"NO\"\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = intersection_end - intersection_start + 1\n    \n    # If the length is less than or equal to 1, it cannot be prime\n    if length <= 1:\n        return \"NO\"\n    \n    # Check if the length is a prime number\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    # If no divisors were found, the length is prime\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "```python\nfrom math import copysign\n\ndef prod_signs(arr):\n    if not arr:\n        return None\n\n    sum_magnitudes = sum(abs(num) for num in arr)\n    sign_product = 1\n\n    for num in arr:\n        if num != 0:\n            sign_product *= int(copysign(1, num))\n        else:\n            sign_product = 0\n            break\n\n    return sum_magnitudes * sign_product\n```"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    min_path = None\n\n    def dfs(path, r, c):\n        nonlocal min_path\n        if len(path) == k:\n            if min_path is None or path < min_path:\n                min_path = path[:]\n            return\n\n        for dr, dc in directions:\n            new_row, new_col = r + dr, c + dc\n            if 0 <= new_row < N and 0 <= new_col < N:\n                path.append(grid[new_row][new_col])\n                dfs(path, new_row, new_col)\n                path.pop()\n\n    for r in range(N):\n        for c in range(N):\n            dfs([grid[r][c]], r, c)\n\n    return min_path\n\n# Example usage\n# grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# k = 3\n# print(minPath(grid, k))  # Output: [1, 2, 1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci_sequence = [3]  # Start with tri(1) = 3\n    \n    for k in range(1, n + 1):\n        if k % 2 == 0:  # k is even\n            value = 1 + k // 2\n        else:  # k is odd\n            if k == 1:  # Special case for tri(1)\n                value = 3\n            else:\n                # Ensure we have enough values to calculate tri(k) for odd k\n                value = tribonacci_sequence[k - 1] + tribonacci_sequence[k - 2] + (1 + (k + 1) // 2)\n        tribonacci_sequence.append(value)\n\n    return tribonacci_sequence[:n + 1]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product_of_odds = 1\n    found_odd_digit = False\n    \n    for char in str(n):\n        digit = int(char)\n        if digit % 2 != 0:  # Check if the digit is odd\n            product_of_odds *= digit\n            found_odd_digit = True\n    \n    return product_of_odds if found_odd_digit else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string: str) -> bool:\n    \"\"\"\n    Determine if there is a valid nested subsequence of brackets in the input string.\n\n    Args:\n    string (str): A string containing only square brackets.\n\n    Returns:\n    bool: True if there is a nested subsequence, False otherwise.\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:  # Check if there's a matching opening bracket\n                stack.pop()\n                if stack:  # If stack is not empty, nesting is confirmed\n                    return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "import math\n\n\ndef sum_squares(lst):\n    return sum(math.ceil(number) ** 2 for number in lst)\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Remove trailing spaces\n    trimmed_txt = txt.rstrip()\n    \n    # Check if the trimmed text is empty\n    if not trimmed_txt:\n        return False\n    \n    # Get the last character of the trimmed text\n    last_char = trimmed_txt[-1]\n    \n    # Check if the last character is a letter\n    if not last_char.isalpha():\n        return False\n    \n    # Split the text and get the last word\n    words = trimmed_txt.split()\n    last_word = words[-1] if words else ''\n    \n    # Check if the last word is a single letter\n    return len(last_word) == 1\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    # If the array has less than 2 elements, there can't be a preceding element to compare.\n    if len(arr) < 2:\n        return -1\n\n    # Iterate over the array starting from the second element.\n    for i in range(1, len(arr)):\n        # Check if the current element is less than the previous element.\n        if arr[i] < arr[i - 1]:\n            # Return the current index immediately as it is the largest found so far.\n            return i\n\n    # If no such element is found, return -1.\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    Returns a tuple (largest_negative, smallest_positive), where:\n    - largest_negative is the largest negative integer in the list, or None if there are no negative integers.\n    - smallest_positive is the smallest positive integer in the list, or None if there are no positive integers.\n    \"\"\"\n    # Filter negative and positive numbers\n    negative_numbers = [num for num in lst if num < 0]\n    positive_numbers = [num for num in lst if num > 0]\n\n    # Find the largest negative number or None if the list is empty\n    largest_negative = max(negative_numbers, default=None)\n    # Find the smallest positive number or None if the list is empty\n    smallest_positive = min(positive_numbers, default=None)\n\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a: str, b: str) -> str:\n    def convert_to_float(value: str) -> float:\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n\n    num_a = convert_to_float(a)\n    num_b = convert_to_float(b)\n\n    if num_a == num_b:\n        return None\n\n    return a if num_a > num_b else b\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    A number can be written as the sum of four positive even numbers if it is even and at least 8.\n    \"\"\"\n    # A number less than 8 cannot be expressed as the sum of four positive even numbers\n    if n < 8:\n        return False\n    # Check if the number is even\n    if n % 2 != 0:\n        return False\n    # If both conditions are satisfied, the number can be expressed as the sum of four positive even numbers\n    return True\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a number n.\n\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    Args:\n    n (int): The number to calculate the Brazilian factorial for.\n\n    Returns:\n    int: The Brazilian factorial of n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    result = 1\n    current_factorial = 1\n    for i in range(1, n + 1):\n        current_factorial *= i\n        result *= current_factorial\n    \n    return result\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = []\n    space_count = 0\n    \n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count == 1:\n                result.append('_')\n            elif space_count == 2:\n                result.append('__')\n            elif space_count > 2:\n                result.append('-')\n            # Reset space count after processing spaces\n            space_count = 0\n            result.append(char)\n    \n    # Handle trailing spaces\n    if space_count == 1:\n        result.append('_')\n    elif space_count == 2:\n        result.append('__')\n    elif space_count > 2:\n        result.append('-')\n    \n    return ''.join(result)\n\n# Example usage:\n# print(fix_spaces(\"Example   3\"))  # Output: \"Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Check if the file name is valid based on specified rules.\n\n    Args:\n        file_name (str): The name of the file to check.\n\n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    if not isinstance(file_name, str):\n        return 'No'\n    \n    # Check for exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into the name and extension\n    name_part, extension_part = file_name.split('.')\n    \n    # Check if the name part is non-empty and starts with a letter\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    \n    # Count digits in the name part\n    digit_count = sum(1 for char in name_part if char.isdigit())\n    if digit_count > 3:\n        return 'No'\n    \n    # Validate the file extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if extension_part not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers. For all entries in the list, the function squares the integer entry if its index is a \n    multiple of 3 and cubes the integer entry if its index is a multiple of 4 and not a multiple of 3. The function does not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function then returns the sum of all entries.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5] the output should be -126\n    \"\"\"\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0 and index % 3 != 0:\n            total_sum += value ** 3\n        else:\n            total_sum += value\n    return total_sum\n"}
{"task_id": "HumanEval/143", "completion": "from math import sqrt\n\ndef words_in_sentence(sentence):\n    def is_prime(number):\n        \"\"\"Check if a number is a prime number.\"\"\"\n        if number <= 1:\n            return False\n        if number == 2:\n            return True\n        if number % 2 == 0:\n            return False\n        for i in range(3, int(sqrt(number)) + 1, 2):\n            if number % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    return ' '.join(prime_length_words)\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x: str, n: str) -> bool:\n    \"\"\"\n    Determines if the product of two fractions x and n is a whole number.\n\n    Parameters:\n    x (str): A string representation of the first fraction in the format 'numerator/denominator'.\n    n (str): A string representation of the second fraction in the format 'numerator/denominator'.\n\n    Returns:\n    bool: True if the product of the fractions is a whole number, False otherwise.\n    \"\"\"\n    def parse_fraction(fraction: str):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n\n    return product_numerator % product_denominator == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Sort the list using the sum of digits as the key\n    return sorted(nums, key=digit_sum)\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"\n    Counts the number of elements in the array that are greater than 10\n    and have both first and last digits as odd numbers.\n\n    Args:\n    nums (list of int): A list of integers.\n\n    Returns:\n    int: The count of numbers satisfying the condition.\n    \"\"\"\n    def is_odd(digit):\n        return digit % 2 != 0\n\n    counter = 0\n    for num in nums:\n        if num > 10:\n            abs_num = abs(num)\n            last_digit = abs_num % 10\n            while abs_num >= 10:\n                abs_num //= 10\n            first_digit = abs_num\n            if is_odd(first_digit) and is_odd(last_digit):\n                counter += 1\n    return counter\n"}
{"task_id": "HumanEval/147", "completion": "import math\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    count0 = count1 = count2 = 0\n\n    for element in a:\n        remainder = element % 3\n        if remainder == 0:\n            count0 += 1\n        elif remainder == 1:\n            count1 += 1\n        elif remainder == 2:\n            count2 += 1\n\n    total_triples = 0\n    # Use math.comb for combination calculation\n    total_triples += math.comb(count0, 3)\n    total_triples += math.comb(count1, 3)\n    total_triples += math.comb(count2, 3)\n    total_triples += count0 * count1 * count2\n\n    return total_triples\n"}
{"task_id": "HumanEval/148", "completion": "def planets_between(planet1, planet2):\n    \"\"\"\n    Returns a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2.\n    If planet1 or planet2 are not correct planet names, returns an empty tuple.\n    \"\"\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planet names are valid\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Get indices of the planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Determine the range between the two indices\n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    # Get intermediate planets\n    intermediate_planets = planets[start_index:end_index]\n    \n    return tuple(intermediate_planets)\n"}
{"task_id": "HumanEval/149", "completion": "def filter_and_sort_strings(lst):\n    \"\"\"Filter out strings with odd lengths and return a sorted list.\n    The list is sorted by length and then alphabetically if lengths are equal.\n    \"\"\"\n    # Filter strings with even lengths\n    filtered_list = [s for s in lst if len(s) % 2 == 0]\n    # Sort by length and then alphabetically\n    filtered_list.sort(key=lambda x: (len(x), x))\n    return filtered_list\n\n# Example usage:\n# assert filter_and_sort_strings([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n# assert filter_and_sort_strings([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n# assert filter_and_sort_strings([]) == []  # Edge case: empty list"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    limit = int(n**0.5)\n    for divisor in range(3, limit + 1, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\n\ndef x_or_y(n, x, y):\n    \"\"\"Return x if n is prime, otherwise return y.\"\"\"\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    '''\n    sum_of_squares = 0\n    for element in lst:\n        if isinstance(element, int) and element > 0 and element % 2 != 0:\n            sum_of_squares += element * element\n    return sum_of_squares\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game: list[int], guess: list[int]) -> list[int]:\n    \"\"\"\n    Determine how far off each guess was from the actual scores.\n\n    Parameters:\n    - game: A list of integers representing the actual scores of the matches.\n    - guess: A list of integers representing the guessed scores.\n\n    Returns:\n    A list of integers where each element is 0 if the guess was correct,\n    or the absolute difference if the guess was incorrect.\n    \"\"\"\n    return [0 if game[i] == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]\n"}
{"task_id": "HumanEval/153", "completion": "def strongest_extension(class_name, extensions):\n    \"\"\"Finds the strongest extension based on the difference between the count of uppercase and lowercase letters.\"\"\"\n    if not extensions:\n        return class_name\n\n    max_strength = float('-inf')\n    strongest_extension = \"\"\n\n    for extension in extensions:\n        uppercase_count = sum(1 for char in extension if char.isupper())\n        lowercase_count = sum(1 for char in extension if char.islower())\n        strength = uppercase_count - lowercase_count\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"Return True if any rotation of 'b' is a substring of 'a'.\n    \n    Parameters:\n    a (str): The string in which to search for a substring.\n    b (str): The string to rotate and check as a substring in 'a'.\n\n    Returns:\n    bool: True if any rotation of 'b' is a substring of 'a', otherwise False.\n    \"\"\"\n    if not b:  # Handle the case where 'b' is an empty string\n        return True\n    if len(b) > len(a):  # If 'b' is longer than 'a', no rotation can be a substring\n        return False\n    # Concatenate 'b' with itself\n    doubled_b = b + b\n    # Check if 'a' is a substring of the concatenated string\n    return any(a in doubled_b[i:i+len(a)] for i in range(len(b)))"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\"\"\"\n    num = abs(num)  # Use absolute value to handle negative numbers\n    even_count = sum(1 for digit in str(num) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(num) if int(digit) % 2 != 0)\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Convert a positive integer to its Roman numeral equivalent in lowercase.\n\n    Parameters:\n    number (int): A positive integer (1 <= number <= 1000).\n\n    Returns:\n    str: The Roman numeral representation of the number in lowercase.\n    \"\"\"\n    roman_mapping = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    \n    roman_numeral = \"\"\n    \n    # Iterate over each value-symbol pair in the mapping\n    for value, symbol in roman_mapping:\n        # Subtract the value from the number and add the symbol to the result\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    \n    return roman_numeral.lower()\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    x, y, z = sides\n    # Check if the sides can form a triangle\n    if x + y <= z:\n        return False\n    # Check for right-angled triangle using Pythagorean theorem\n    return x ** 2 + y ** 2 == z ** 2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Returns the word with the maximum number of unique characters.\n    If multiple words have the same number of unique characters,\n    returns the lexicographically smallest one.\n    \"\"\"\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        return \"\"\n\n    max_unique_count = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_characters = set(word)\n        unique_count = len(unique_characters)\n\n        # Update if a word has more unique characters\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_word = word\n        # If the same number of unique characters, check lexicographical order\n        elif unique_count == max_unique_count:\n            if word < max_word:\n                max_word = word\n\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Calculate the actual number of carrots that can be eaten\n    actual_eaten = min(need, remaining)\n    \n    # Calculate the total number of carrots eaten\n    total_eaten = number + actual_eaten\n    \n    # Calculate the number of remaining carrots\n    remaining_carrots = remaining - actual_eaten\n\n    return [total_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operators, operands):\n    \"\"\"\n    Evaluates an algebraic expression based on the given list of operators and operands.\n\n    Parameters:\n    operators (list of str): A list of algebraic operators ('+', '-', '*', '//', '**').\n    operands (list of int): A list of non-negative integers.\n\n    Returns:\n    int: The result of the evaluated expression.\n\n    Raises:\n    ValueError: If division by zero is attempted.\n    \"\"\"\n    # Initialize result with the first operand\n    result = operands[0]\n\n    # Define a dictionary to map operators to their corresponding operations\n    operations = {\n        '+': lambda x, y: x + y,\n        '-': lambda x, y: x - y,\n        '*': lambda x, y: x * y,\n        '//': lambda x, y: x // y if y != 0 else (_ for _ in ()).throw(ValueError(\"Division by zero is not allowed.\")),\n        '**': lambda x, y: x ** y\n    }\n\n    # Iterate over operators and operands to compute the result\n    for i, op in enumerate(operators):\n        result = operations[op](result, operands[i + 1])\n\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if any(c.isalpha() for c in s):\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        return s[::-1]"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its MD5 hash equivalent as a lowercase hexadecimal string.\n    If 'text' is an empty string, return None.\n\n    Args:\n    text (str): The input string to be hashed.\n\n    Returns:\n    str or None: The MD5 hash of the input string as a lowercase hexadecimal string, or None if the input is an empty string.\n\n    Examples:\n    >>> string_to_md5('Hello world')\n    '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    md5_hash = hashlib.md5(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Generate a list of even single-digit integers between two given integers a and b, inclusive.\n    \n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n    \n    Returns:\n    list: A list of even single-digit integers between a and b in ascending order.\n    \"\"\"\n    single_digit_even_numbers = [2, 4, 6, 8]\n    start = min(a, b)\n    end = max(a, b)\n    \n    result = []\n    for digit in single_digit_even_numbers:\n        if start <= digit <= end:\n            result.append(digit)\n    \n    return result"}